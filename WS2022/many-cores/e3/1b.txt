#include <stdio.h>
#include "timer.hpp"
 

__global__ void add(int n, float *x, float *y, float *z, int k)
{
  int total_threads =  blockDim.x * gridDim.x;;
  int thread_id = blockIdx.x*blockDim.x + threadIdx.x + k;
  for (int i = thread_id; i<n; i += total_threads) z[i] = x[i] + y[i];
}
 
int main(void)
{
for (int k=35;k<64;k++){
  int N = 100000000;
 
  float *x, *y, *z, *d_x, *d_y, *d_z;
  Timer timer;
  float elapsed;
 
  // Allocate host memory and initialize
  x = (float*)malloc(N*sizeof(float));
  y = (float*)malloc(N*sizeof(float));
  z = (float*)malloc(N*sizeof(float));
 
  for (int i = 0; i < N; i++) {
    x[i] = 1.0f;
    y[i] = 1.0f;
  }
 
  // Allocate device memory and copy host data over
  cudaMalloc(&d_x, N*sizeof(float)); 
  cudaMalloc(&d_y, N*sizeof(float));
  cudaMalloc(&d_z, N*sizeof(float));
 
  cudaMemcpy(d_x, x, N*sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(d_y, y, N*sizeof(float), cudaMemcpyHostToDevice);
 
  // wait for previous operations to finish, then start timings
  cudaDeviceSynchronize();
  timer.reset();
 
  // Perform SAXPY on 1M elements
  add<<<256, 256>>>(N, d_x, d_y, d_z, k);
 
  // wait for kernel to finish, then print elapsed time
  cudaDeviceSynchronize();
  elapsed = timer.get();
  //printf("Elapsed: %g\n", timer.get());
 
  // copy data back (implicit synchronization point)
  cudaMemcpy(z, d_z, N*sizeof(float), cudaMemcpyDeviceToHost);
  //cudaGetDeviceProperties();

  // Numerical error check:
  //for (int i = 0; i < N; i++)
     //printf("z %d: %f\n", i, z[i]);
    //printf("z 99999997: %f\n",z[99999997]);
    //printf("z 99999998: %f\n", z[99999998]);
    //printf("z 99999999: %f\n", z[99999999]);
  printf("%f, ", k, 3.0f * 8.0f  *(N-k) / 1000000000.0f / elapsed);
 
  // tidy up host and device memory
  cudaFree(d_x);
  cudaFree(d_y);
  free(x);
  free(y);
 
  cudaDeviceReset();  // for leak check to work for CUDA buffers
}
  return EXIT_SUCCESS;
}
 