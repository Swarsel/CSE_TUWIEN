#include <stdio.h>
#include "timer.hpp"
 
 
__global__ void add(int n, double *x, double *y, double *z)
{
  int i = blockIdx.x*blockDim.x + threadIdx.x;
  if (i < n) z[i] = x[i] + y[i];
}
 
int main(void)
{
  int N = 10000000;
  int gridSize[7];
  int blockSize[7];
  gridSize[0] = 16;
  blockSize[0] = 16;
  gridSize[1] = 32;
  blockSize[1] = 32;
  gridSize[2] = 64;
  blockSize[2] = 64;
  gridSize[3] = 128;
  blockSize[3] = 128;
  gridSize[4] = 256;
  blockSize[4] = 256;
  gridSize[5] = 512;
  blockSize[5] = 512;
  gridSize[6] = 1024;
  blockSize[6] = 1024;
  double *x, *y, *d_x, *d_y;
  x = (double*)malloc(N*sizeof(double));
  y = (double*)malloc(N*sizeof(double));
   for (int i = 0; i < N; i++) {
        x[i] = 1.0f;
        y[i] = 2.0f;
      }
   cudaMalloc(&d_x, N*sizeof(double)); 
      cudaMalloc(&d_y, N*sizeof(double));

  cudaMemcpy(d_x, x, N*sizeof(double), cudaMemcpyHostToDevice);
      cudaMemcpy(d_y, y, N*sizeof(double), cudaMemcpyHostToDevice);

  for(int ii=0; ii < 7; ii++){ 
    printf("%d & ",gridSize[ii]);
    for(int jj=0; jj < 7; jj++){ 
     double time = 0.0;
     double time_sum = 0.0;
      for(int it=0; it<5;it++){
      double *z, *d_z;
      Timer timer;
 
      // Allocate host memory and initialize
      
      z = (double*)malloc(N*sizeof(double));
 
      
 
      // Allocate device memory and copy host data over
      
      cudaMalloc(&d_z, N*sizeof(double));
 
      
 
      // wait for previous operations to finish, then start timings
      cudaDeviceSynchronize();
      timer.reset();
 
      // Perform SAXPY on 1M elements
      add<<<blockSize[jj], gridSize[ii]>>>(N, d_x, d_y, d_z);
 
      // wait for kernel to finish, then print elapsed time
      cudaDeviceSynchronize();
      time = timer.get();
      time_sum += time;

 
      // tidy up host and device memory
      cudaFree(d_z);

       }
    printf("%f & ", time_sum/10);
 }
printf("\\\\ \n");
}
  return EXIT_SUCCESS;
}
 