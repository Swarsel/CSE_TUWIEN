#include <stdio.h>
#include "timer.hpp"
 
 
__global__ void add(int n, float *x, float *y, float *z)
{
  int i = blockIdx.x*blockDim.x + threadIdx.x;
  if (i < n) z[i] = x[i] + y[i];
}
 
int main(void)
{
  int N[7];
  N[0] = 100;
  N[1] = 300;
  N[2] = 1000;
  N[3] = 10000;
  N[4] = 100000;
  N[5] = 1000000;
  N[6] = 3000000;
  N[7] = 0;

  for(int j=0; j < 7; j++){ 
  printf("%d\n", N[j]);
  float time = 0.0;
  float time_sum = 0.0;
  for(int it=0; it<10;it++){
  float *x, *y, *z, *d_x, *d_y, *d_z;
  Timer timer;
 
  // Allocate host memory and initialize
  x = (float*)malloc(N[j]*sizeof(float));
  y = (float*)malloc(N[j]*sizeof(float));
  z = (float*)malloc(N[j]*sizeof(float));
 
  for (int i = 0; i < N[j]; i++) {
    x[i] = 1.0f;
    y[i] = 2.0f;
  }
 
  // Allocate device memory and copy host data over
  cudaMalloc(&d_x, N[j]*sizeof(float)); 
  cudaMalloc(&d_y, N[j]*sizeof(float));
  cudaMalloc(&d_z, N[j]*sizeof(float));
 
  cudaMemcpy(d_x, x, N[j]*sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(d_y, y, N[j]*sizeof(float), cudaMemcpyHostToDevice);
 
  // wait for previous operations to finish, then start timings
  cudaDeviceSynchronize();
  timer.reset();
 
  // Perform SAXPY on 1M elements
  add<<<(N[j]+255)/256, 256>>>(N[j], d_x, d_y, d_z);
 
  // wait for kernel to finish, then print elapsed time
  cudaDeviceSynchronize();
  time = timer.get();
  time_sum += time;
 
  // copy data back (implicit synchronization point)
  cudaMemcpy(y, d_y, N[j]*sizeof(float), cudaMemcpyDeviceToHost);
 
  // Numerical error check:
  float maxError = 0.0f;
  for (int i = 0; i < N[j]; i++)
    maxError = max(maxError, abs(y[i]-4.0f));
  printf("Max error: %f\n", maxError);
 
  // tidy up host and device memory
  cudaFree(d_x);
  cudaFree(d_y);
  cudaFree(d_z);
  free(x);
  free(y);
 }
 printf("%f\n", time_sum/10);
 }
  return EXIT_SUCCESS;
}
 