#include <stdio.h>
#include "timer.hpp"
 
 
__device__ void sum(double * shared_m, double * result) {

  for (int stride = blockDim.x/2; stride>0; stride/=2) {
    __syncthreads();
    if (threadIdx.x < stride) shared_m[threadIdx.x] += shared_m[threadIdx.x + stride];
  }
    if (threadIdx.x == 0) result[blockIdx.x] = shared_m[0];
  }
 
__global__ void dot_product(int N, double *x, double *y, double * result) {

  __shared__ double shared_m[1024];
  double thread_sum = 0; 
  int total_threads =  blockDim.x * gridDim.x;;
  int thread_id = blockIdx.x*blockDim.x + threadIdx.x;
  for (int i = thread_id; i<N; i += total_threads) thread_sum += x[i] * y[i];
  shared_m[threadIdx.x] = thread_sum;
  sum(shared_m, result);
}
int main(void)
{
  int N = 10000000;

      double *res;
      double *x, *y, *z, *d_x, *d_y, *d_z;
      Timer timer;
 
      // Allocate host memory and initialize
      x = (double*)malloc(N*sizeof(double));
      y = (double*)malloc(N*sizeof(double));
      z = (double*)malloc(N*sizeof(double));
 
      for (int i = 0; i < N; i++) {
        x[i] = 1.0f;
        y[i] = 2.0f;
      }
 
      // Allocate device memory and copy host data over
      cudaMalloc(&d_x, N*sizeof(double)); 
      cudaMalloc(&d_y, N*sizeof(double));
      cudaMalloc(&d_z, N*sizeof(double));
      cudaMalloc(&res, N*sizeof(double));
 
      cudaMemcpy(d_x, x, N*sizeof(double), cudaMemcpyHostToDevice);
      cudaMemcpy(d_y, y, N*sizeof(double), cudaMemcpyHostToDevice);
 
      // wait for previous operations to finish, then start timings
      cudaDeviceSynchronize();
      timer.reset();
 
      // Perform SAXPY on 1M elements
      dot_product<<<1, 1024>>>(N, d_x, d_y, res);
 
      // wait for kernel to finish, then print elapsed time
      cudaDeviceSynchronize();
      
 
      // copy data back (implicit synchronization point)
      cudaMemcpy(z, res, N*sizeof(float), cudaMemcpyDeviceToHost);
      printf("%f", timer.get());
      printf("\n%f", z[0]);

      // Numerical error check:
      float maxError = 0.0f;
      for (int i = 0; i < N; i++)
        maxError = max(maxError, abs(y[i]-4.0f));
      //printf("Max error: %f\n", maxError);
 
      // tidy up host and device memory
      cudaFree(d_x);
      cudaFree(d_y);
      cudaFree(d_z);
      free(x);
      free(y);
   
  return EXIT_SUCCESS;
}
 